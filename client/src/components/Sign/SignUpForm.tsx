import { FC, useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router-dom';

import { useAppDispatch } from '@/hooks';
import { useRegisterMutation } from '@/services/auth.service';
import { setUser } from '@/store/slices/settings.slice';
import { IRegisterUser } from '@/types/user.types';

import styles from './Sign.module.scss';

const SignUpForm: FC = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IRegisterUser>();
  const dispatch = useAppDispatch();
  const navigate = useNavigate();

  const [errorLogin, setErrorLogin] = useState<string | null>(null);

  const [registerUser, { isLoading, isSuccess }] = useRegisterMutation();

  useEffect(() => {
    if (isSuccess) {
      navigate('/');
    }
  }, [isSuccess]);

  const onSubmit = async (fields: IRegisterUser) => {
    const response = await registerUser(fields);

    if ('data' in response) {
      dispatch(setUser(response.data));
    } else if ('error' in response && 'data' in response.error) {
      setErrorLogin(response.error.data as string);
    } else {
      setErrorLogin('—â–æ—Å—å —Å—Ç–∞–ª–æ—Å—å ü§î');
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
      <label htmlFor='username'>
        –í–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω:
        <input
          id='username'
          placeholder='–ª–æ–≥—ñ–Ω...'
          {...register('username', {
            required: '–ª–æ–≥—ñ–Ω —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º',
            minLength: { value: 2, message: '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ª–æ–≥—ñ–Ω–∞ 2 —Å–∏–º–≤–æ–ª–∏' },
          })}
        />
        {errors.username?.message && <span>{errors.username.message}</span>}
      </label>
      <label htmlFor='name'>
        –í–µ–¥—ñ—Ç—å —ñ–º—è:
        <input
          id='name'
          placeholder='—ñ–º—è...'
          {...register('name', {
            required: '—ñ–º—è —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º',
            minLength: { value: 2, message: '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —ñ–º—è 2 —Å–∏–º–≤–æ–ª–∏' },
          })}
        />
        {errors.username?.message && <span>{errors.username.message}</span>}
      </label>
      <label htmlFor='password'>
        –í–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:
        <input
          id='password'
          placeholder='–ø–∞—Ä–æ–ª—å...'
          {...register('password', {
            required: '–ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º',
            minLength: { value: 5, message: '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é 5 —Å–∏–º–≤–æ–ª—ñ–≤' },
          })}
        />
        {errors.password?.message && <span>{errors.password.message}</span>}
      </label>
      {errorLogin && <span>{errorLogin}</span>}
      <button type='submit' disabled={isLoading}>
        –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
      </button>
    </form>
  );
};

export default SignUpForm;
